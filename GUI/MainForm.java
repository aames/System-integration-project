package GUI;

import Core.Objects.Module;
import Core.Objects.Student;
import Core.Workers.ClipboardControl;
import Core.Workers.PdfCreator;
import Core.Workers.StudentBuilder;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.pdfbox.exceptions.COSVisitorException;

/**
 *
 * @author Andrew
 */
public class MainForm extends javax.swing.JPanel {

    private ArrayList<Student> students;
    String currentStudentID;
    String currentSearchStudentDetails = "No search has been performed yet.";

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        students = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jCheckBox1 = new javax.swing.JCheckBox();
        appContainerPanel = new javax.swing.JPanel();
        loadFilesPanel = new javax.swing.JPanel();
        classListBrowseButton = new javax.swing.JButton();
        attendanceBrowseButton = new javax.swing.JButton();
        classListFilePathField = new javax.swing.JTextField();
        gradesFilePathField = new javax.swing.JTextField();
        attendanceFilePathField = new javax.swing.JTextField();
        loadSourceFilesButton = new javax.swing.JButton();
        classListLabel = new javax.swing.JLabel();
        gradesLabel = new javax.swing.JLabel();
        gradesBrowseButton = new javax.swing.JButton();
        attendanceLabel = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        attendanceConfirmCheckBox = new javax.swing.JCheckBox();
        clearSourceFilesButton = new javax.swing.JButton();
        studentDetailsSearchPanel = new javax.swing.JPanel();
        searchField = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        studentDetailsArea = new javax.swing.JTextArea();
        clearStudentDetailsArea = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        copyToClipboardButton = new javax.swing.JButton();
        printStudentDetailsButton = new javax.swing.JButton();
        studentsAndModulesListsPanel = new javax.swing.JPanel();
        studentsLabel = new javax.swing.JLabel();
        modulesLabel = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        studentsTextArea = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        modulesTextArea = new javax.swing.JTextArea();
        studentListCopyButton = new javax.swing.JButton();
        moduleListCopyButton = new javax.swing.JButton();
        resetApplicationButton = new javax.swing.JButton();
        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jCheckBox1.setText("jCheckBox1");

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("SESI Students and Modules"); // NOI18N
        setOpaque(false);

        appContainerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        loadFilesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Sources"));

        classListBrowseButton.setText("Browse");
        classListBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classListBrowseButtonActionPerformed(evt);
            }
        });

        attendanceBrowseButton.setText("Browse");
        attendanceBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attendanceBrowseButtonActionPerformed(evt);
            }
        });

        classListFilePathField.setToolTipText("Browse for the file containing the class list.");

        gradesFilePathField.setToolTipText("Browse for the file containing attendance records.");

        attendanceFilePathField.setToolTipText("Browse for the file containing grades.");

        loadSourceFilesButton.setText("Load files");
        loadSourceFilesButton.setToolTipText("Load students from these files.");
        loadSourceFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSourceFilesButtonActionPerformed(evt);
            }
        });

        classListLabel.setText("Class List");

        gradesLabel.setText("Grades");

        gradesBrowseButton.setText("Browse");
        gradesBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradesBrowseButtonActionPerformed(evt);
            }
        });

        attendanceLabel.setText("Attendance");

        attendanceConfirmCheckBox.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        attendanceConfirmCheckBox.setText("I confirm the attendance file is correct");
        attendanceConfirmCheckBox.setToolTipText("Confirm that your attendance file is correct.");

        clearSourceFilesButton.setText("Clear fields");
        clearSourceFilesButton.setToolTipText("Reset the fields above.");
        clearSourceFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSourceFilesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loadFilesPanelLayout = new javax.swing.GroupLayout(loadFilesPanel);
        loadFilesPanel.setLayout(loadFilesPanelLayout);
        loadFilesPanelLayout.setHorizontalGroup(
            loadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadFilesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(loadFilesPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(loadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(classListLabel)
                            .addGroup(loadFilesPanelLayout.createSequentialGroup()
                                .addComponent(classListFilePathField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(classListBrowseButton))
                            .addComponent(gradesLabel)
                            .addGroup(loadFilesPanelLayout.createSequentialGroup()
                                .addComponent(gradesFilePathField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(attendanceBrowseButton))
                            .addComponent(jLabel14)
                            .addComponent(attendanceLabel)
                            .addGroup(loadFilesPanelLayout.createSequentialGroup()
                                .addComponent(attendanceFilePathField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gradesBrowseButton))
                            .addComponent(attendanceConfirmCheckBox)))
                    .addGroup(loadFilesPanelLayout.createSequentialGroup()
                        .addComponent(loadSourceFilesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearSourceFilesButton)
                        .addGap(30, 30, 30))))
        );
        loadFilesPanelLayout.setVerticalGroup(
            loadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadFilesPanelLayout.createSequentialGroup()
                .addComponent(classListLabel)
                .addGap(1, 1, 1)
                .addGroup(loadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classListFilePathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classListBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gradesLabel)
                .addGap(1, 1, 1)
                .addGroup(loadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gradesFilePathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(attendanceBrowseButton))
                .addGap(3, 3, 3)
                .addComponent(attendanceLabel)
                .addGap(1, 1, 1)
                .addGroup(loadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attendanceFilePathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gradesBrowseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(attendanceConfirmCheckBox)
                .addGroup(loadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loadFilesPanelLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel14))
                    .addGroup(loadFilesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(clearSourceFilesButton)
                        .addComponent(loadSourceFilesButton))))
        );

        studentDetailsSearchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search for a student"));
        studentDetailsSearchPanel.setName(""); // NOI18N

        searchField.setToolTipText("Enter a student name or ID to search");

        searchBtn.setText("Search");
        searchBtn.setToolTipText("Search for a student.");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        studentDetailsArea.setColumns(20);
        studentDetailsArea.setRows(5);
        studentDetailsArea.setToolTipText("Student details will be displayed here when you search for a student.");
        jScrollPane4.setViewportView(studentDetailsArea);

        clearStudentDetailsArea.setText("Clear search");
        clearStudentDetailsArea.setToolTipText("Clear the search form.");
        clearStudentDetailsArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearStudentDetailsAreaActionPerformed(evt);
            }
        });

        jLabel1.setText("Student details");

        copyToClipboardButton.setText("Copy details to clipboard");
        copyToClipboardButton.setToolTipText("Copy the student details to the clipboard.");
        copyToClipboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyToClipboardButtonActionPerformed(evt);
            }
        });

        printStudentDetailsButton.setText("Export");
        printStudentDetailsButton.setToolTipText("Export the student details.");
        printStudentDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printStudentDetailsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout studentDetailsSearchPanelLayout = new javax.swing.GroupLayout(studentDetailsSearchPanel);
        studentDetailsSearchPanel.setLayout(studentDetailsSearchPanelLayout);
        studentDetailsSearchPanelLayout.setHorizontalGroup(
            studentDetailsSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentDetailsSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentDetailsSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studentDetailsSearchPanelLayout.createSequentialGroup()
                        .addComponent(searchField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchBtn))
                    .addComponent(jScrollPane4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentDetailsSearchPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(printStudentDetailsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copyToClipboardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearStudentDetailsArea))
                    .addGroup(studentDetailsSearchPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        studentDetailsSearchPanelLayout.setVerticalGroup(
            studentDetailsSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentDetailsSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentDetailsSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(studentDetailsSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearStudentDetailsArea)
                    .addComponent(copyToClipboardButton)
                    .addComponent(printStudentDetailsButton))
                .addGap(7, 7, 7))
        );

        studentsAndModulesListsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Student and module lists"));

        studentsLabel.setText("Students");

        modulesLabel.setText("Modules");

        studentsTextArea.setColumns(20);
        studentsTextArea.setRows(5);
        studentsTextArea.setToolTipText("List of students currently loaded in the system.");
        jScrollPane5.setViewportView(studentsTextArea);

        modulesTextArea.setColumns(20);
        modulesTextArea.setRows(5);
        modulesTextArea.setToolTipText("List of modules currently in the system.");
        jScrollPane6.setViewportView(modulesTextArea);

        studentListCopyButton.setText("Copy to clipboard");
        studentListCopyButton.setToolTipText("Copy the student list to the clipboard.");
        studentListCopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentListCopyButtonActionPerformed(evt);
            }
        });

        moduleListCopyButton.setText("Copy to clipboard");
        moduleListCopyButton.setToolTipText("Copy the module list to the clipboard.");
        moduleListCopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moduleListCopyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout studentsAndModulesListsPanelLayout = new javax.swing.GroupLayout(studentsAndModulesListsPanel);
        studentsAndModulesListsPanel.setLayout(studentsAndModulesListsPanelLayout);
        studentsAndModulesListsPanelLayout.setHorizontalGroup(
            studentsAndModulesListsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentsAndModulesListsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentsAndModulesListsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studentsAndModulesListsPanelLayout.createSequentialGroup()
                        .addComponent(studentsLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(studentsAndModulesListsPanelLayout.createSequentialGroup()
                        .addGroup(studentsAndModulesListsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(studentListCopyButton)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(studentsAndModulesListsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentsAndModulesListsPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(moduleListCopyButton))
                            .addGroup(studentsAndModulesListsPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(studentsAndModulesListsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(studentsAndModulesListsPanelLayout.createSequentialGroup()
                                        .addComponent(modulesLabel)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane6))))))
                .addContainerGap())
        );
        studentsAndModulesListsPanelLayout.setVerticalGroup(
            studentsAndModulesListsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentsAndModulesListsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(studentsAndModulesListsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modulesLabel)
                    .addComponent(studentsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(studentsAndModulesListsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(studentsAndModulesListsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentListCopyButton)
                    .addComponent(moduleListCopyButton))
                .addContainerGap())
        );

        resetApplicationButton.setText("Reset application");
        resetApplicationButton.setToolTipText("Reset the application and delete all student records.");
        resetApplicationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetApplicationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout appContainerPanelLayout = new javax.swing.GroupLayout(appContainerPanel);
        appContainerPanel.setLayout(appContainerPanelLayout);
        appContainerPanelLayout.setHorizontalGroup(
            appContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appContainerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(appContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(appContainerPanelLayout.createSequentialGroup()
                        .addComponent(studentDetailsSearchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loadFilesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(studentsAndModulesListsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appContainerPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(resetApplicationButton)))
                .addContainerGap())
        );
        appContainerPanelLayout.setVerticalGroup(
            appContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appContainerPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(appContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(studentDetailsSearchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadFilesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(studentsAndModulesListsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetApplicationButton)
                .addGap(33, 33, 33))
        );

        studentDetailsSearchPanel.getAccessibleContext().setAccessibleDescription("");

        titlePanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        titleLabel.setFont(new java.awt.Font("Meiryo", 0, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Students and Modules");
        titleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addGap(206, 206, 206)
                .addComponent(titleLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(appContainerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(appContainerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        appContainerPanel.getAccessibleContext().setAccessibleName("Students and Modules");

        getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    private void attendanceBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attendanceBrowseButtonActionPerformed
        final JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == 1) {
            return;
        }

        try {
            this.gradesFilePathField.setText(fc.getSelectedFile().getCanonicalPath());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_attendanceBrowseButtonActionPerformed

    private void gradesBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradesBrowseButtonActionPerformed
        final JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this) == 1) {
            return;
        }

        try {
            this.attendanceFilePathField.setText(fc.getSelectedFile().getCanonicalPath());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_gradesBrowseButtonActionPerformed

    private void clearSourceFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSourceFilesButtonActionPerformed
        this.classListFilePathField.setText("");
        this.gradesFilePathField.setText("");
        this.attendanceFilePathField.setText("");
        this.attendanceConfirmCheckBox.setSelected(false);
    }//GEN-LAST:event_clearSourceFilesButtonActionPerformed

private void loadSourceFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSourceFilesButtonActionPerformed
    //Load files and get checkbox details
    boolean confirmAttendance;
    String classListFilePath, attendanceFilePath, gradesFilePath;

    classListFilePath = this.classListFilePathField.getText();
    gradesFilePath = this.gradesFilePathField.getText();
    attendanceFilePath = this.attendanceFilePathField.getText();
    confirmAttendance = this.attendanceConfirmCheckBox.isSelected();
    // ensure the files are loaded...
    if (classListFilePath.contains(".xlsx")) {
        if (gradesFilePath.contains(".xls")) {
            if (attendanceFilePath.contains(".xls")) {
                if (confirmAttendance) {
                    //Perform the load
                    loadFiles(classListFilePath, gradesFilePath, attendanceFilePath, students);
                } else {
                    JOptionPane.showMessageDialog(this, "Attendance checkbox is empty.", "Alert", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "The grades filepath is incorrect or the file is the wrong type.", "Alert", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "The attendance filepath is incorrect or the file is the wrong type.", "Alert", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "The class list filepath is incorrect or the file is the wrong type.", "Alert", JOptionPane.ERROR_MESSAGE);
    }
}//GEN-LAST:event_loadSourceFilesButtonActionPerformed

    private void loadFiles(String classListFilePath, String gradesFilePath, String attendanceFilePath, ArrayList<Student> currentStudents) {
        ArrayList<Student> theStudents = new ArrayList<>();
        ArrayList<Module> modules;
        try {
            StudentBuilder sb = new StudentBuilder(classListFilePath, gradesFilePath, attendanceFilePath, currentStudents);
            theStudents = sb.buildStudents();
            this.students = theStudents;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "The files could not be loaded. Please check they are correct and try again.", "Alert", JOptionPane.ERROR_MESSAGE);
        }

        // Display the lists again
        this.studentsTextArea.setText("");
        this.modulesTextArea.setText("");
        modules = new ArrayList<>();
        for (Student s : this.students) {
            this.studentsTextArea.append(s.getStudentid() + ", " + s.getName() + ", " + s.getAwardcode() + ", " + s.getStudytype() + "\n");
            for (Module m : s.getModules()) {
                if (!modules.contains(m)) {
                    modules.add(m);
                }
            }
        }
        for (Module m : modules) {
            this.modulesTextArea.append(m.getCode() + ", " + m.getTitle() + ", " + m.getLeader() + "\n");
        }
        // empty the loading fields 
        this.classListFilePathField.setText("");
        this.gradesFilePathField.setText("");
        this.attendanceFilePathField.setText("");
        this.attendanceConfirmCheckBox.setSelected(false);
    }

private void classListBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classListBrowseButtonActionPerformed
    final JFileChooser fc = new JFileChooser();
    if (fc.showOpenDialog(this) == 1) {
        return;
    }

    try {
        this.classListFilePathField.setText(fc.getSelectedFile().getCanonicalPath());
    } catch (Exception e) {
        e.printStackTrace();
    }
}//GEN-LAST:event_classListBrowseButtonActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        Student searchStudent = new Student("090909u"); //default search student
        String searchStr = this.searchField.getText();
        String searchStudentDetails;
        boolean multipleStudents = false;
        if (!students.isEmpty()) {
            if (!searchStr.isEmpty()) {
                // complete the search
                for (Student s : this.students) {
                    if (s.getStudentid().contains(searchStr) || s.getName().contains(searchStr)) {
                        if (searchStudent.getStudentid().equalsIgnoreCase("090909u")) {
                            searchStudent = s;
                        } else if (countStudentSearch(searchStr) > 1) {
                            JOptionPane.showMessageDialog(this, "Multiple students found, please search by ID instead.", "Alert", JOptionPane.ERROR_MESSAGE);
                            this.studentDetailsArea.setText("");
                            searchStudent = new Student("090909u");
                            multipleStudents = true;
                            break;
                        }
                    }
                }
            } else {
                this.studentDetailsArea.setText("Please enter a student ID or name to search by.");
            }

        } else {
            this.studentDetailsArea.setText("No students to search. Try loading some?");
        }
        if (!searchStudent.getStudentid().equalsIgnoreCase("090909u")) {
            ArrayList<Double> marks = new ArrayList();
            ArrayList<Double> attendance = new ArrayList();
            double averageMark;
            double averageAttendance;
            String theStudentsModules = "";
            if (!searchStudent.getModules().isEmpty()) {
                for (Module m : searchStudent.getModules()) {
                    theStudentsModules = theStudentsModules + "Module title : " + m.getTitle() + "\n"
                            + "Module code : " + m.getCode() + "\n"
                            + "Module leader : " + m.getLeader() + "\n"
                            + "Attendance : " + m.getAttendance() + "\n"
                            + "Grade : " + m.getMark() + "\n"
                            + "Level : " + m.getLevel() + "\n";
                    try {
                        marks.add(Double.parseDouble(m.getMark()));

                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "An mark was missing from the input file.", "Alert", JOptionPane.ERROR_MESSAGE);
                    }
                    try {

                        attendance.add(Double.parseDouble(m.getAttendance()));
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "An attendance record was missing from the input file.", "Alert", JOptionPane.ERROR_MESSAGE);
                    }

                }
            }
            double sumOfMarks = 0.0, sumOfAttendance = 0.0;
            int numOfMarks = 0, numOfAttendance = 0;
            for (Double i : marks) {
                sumOfMarks = sumOfMarks + i;
                numOfMarks++;
            }
            for (Double i : attendance) {
                sumOfAttendance = sumOfAttendance + (i * 100);
                numOfAttendance++;
            }
            averageMark = 0.0;
            averageMark = sumOfMarks / numOfMarks;

            averageAttendance = 0.0;
            averageAttendance = sumOfAttendance / numOfAttendance;

            searchStudentDetails = "Student Name: " + searchStudent.getName() + "\n"
                    + "Student ID : " + searchStudent.getStudentid() + "\n"
                    + "Award code : " + searchStudent.getAwardcode() + "\n"
                    + "Study type : " + searchStudent.getStudytype() + "\n"
                    + "Modules" + "\n"
                    + "========" + "\n" + theStudentsModules
                    + "========" + "\n"
                    + "Averages" + "\n"
                    + "========" + "\n"
                    + "Average mark: " + averageMark + "/100"
                    + "Average attendance: " + averageAttendance + "/100";
            this.studentDetailsArea.setText(searchStudentDetails);
            this.currentSearchStudentDetails = searchStudentDetails;
            this.currentStudentID = searchStudent.getStudentid();

        } else if (multipleStudents == true) {
            this.studentDetailsArea.setText("Multiple students found.\nPlease search again using the student ID.");
        } else {
            this.studentDetailsArea.setText("Student not found.");
        }

    }//GEN-LAST:event_searchBtnActionPerformed
    private int countStudentSearch(String str) {
        int count = 0;
        for (Student s : this.students) {
            if (s.getName().contains(str) || s.getStudentid().contains(str)) {
                count++;
            }
        }
        return count;
    }
    private void clearStudentDetailsAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearStudentDetailsAreaActionPerformed
        this.searchField.setText("");
        this.studentDetailsArea.setText("");
    }//GEN-LAST:event_clearStudentDetailsAreaActionPerformed

    private void copyToClipboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyToClipboardButtonActionPerformed
        if (!this.studentDetailsArea.getText().isEmpty()) {
            ClipboardControl cc = new ClipboardControl();
            cc.setClipboard(this.studentDetailsArea.getText());
            JOptionPane.showMessageDialog(this, "Successfully copied to clipboard.");
        } else {
            JOptionPane.showMessageDialog(this, "There is nothing to copy.", "Alert", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_copyToClipboardButtonActionPerformed

    private void printStudentDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printStudentDetailsButtonActionPerformed
        /*
         * Java support for printing is very buggy (as was discovered in build 5), 
         * exporting to pdf with the Apache PDFBox library can combat this issue.
         */
        // get input
        String fileName;
        try {
            fileName = JOptionPane.showInputDialog("Exporting to pdf. Please input a file name.");
        } catch (NullPointerException e) {
            
            return;
        } catch (Exception e){
            return;
        }
        ArrayList<String> studentDetailsToPrint = new ArrayList<>();
        Student thisStudent = new Student("defaultID");
        for (Student s : students) {
            if (this.currentStudentID.equalsIgnoreCase(s.getStudentid())) {
                thisStudent = s;
            }
        }
        if (!thisStudent.getStudentid().contains("default")) {
            studentDetailsToPrint.add("NAME: " + thisStudent.getName());
            studentDetailsToPrint.add("STUDENT ID: " + thisStudent.getStudentid());
            studentDetailsToPrint.add("STUDY TYPE: " + thisStudent.getStudytype());
            studentDetailsToPrint.add("AWARD CODE: " + thisStudent.getAwardcode());
            studentDetailsToPrint.add("MODULES");
            for (Module m : thisStudent.getModules()) {
                studentDetailsToPrint.add("TITLE: " + m.getTitle());
                studentDetailsToPrint.add("CODE: " + m.getCode());
                studentDetailsToPrint.add("MODULE LEADER: " + m.getLeader());
                studentDetailsToPrint.add("GRADE: " + m.getMark());
                studentDetailsToPrint.add("ATTENDANCE: " + m.getAttendance());
            }
        } else {
            studentDetailsToPrint.add("There is no current Student");
        }
        
        if (fileName != null && fileName.length() >= 1) {
            if (!fileName.endsWith(".pdf")) {
                fileName = fileName.concat(".pdf");
            }
            PdfCreator pdfc = new PdfCreator();
            try {
                pdfc.printArrayListOfStrings(studentDetailsToPrint, fileName);
            } catch (IOException | COSVisitorException e) {
                JOptionPane.showMessageDialog(this, "There was an error, the pdf may not have been created.", "Alert", JOptionPane.ERROR_MESSAGE);
            }
        } else if (fileName == null){
            JOptionPane.showMessageDialog(this, "Export has been cancelled.", "Alert", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_printStudentDetailsButtonActionPerformed

    private void moduleListCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moduleListCopyButtonActionPerformed
        if (!this.modulesTextArea.getText().isEmpty()) {
            ClipboardControl cc = new ClipboardControl();
            cc.setClipboard(this.modulesTextArea.getText());
            JOptionPane.showMessageDialog(this, "Successfully copied modules list to clipboard.");
        } else {
            JOptionPane.showMessageDialog(this, "There is nothing to copy.", "Alert", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_moduleListCopyButtonActionPerformed

    private void studentListCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentListCopyButtonActionPerformed
        if (!this.studentsTextArea.getText().isEmpty()) {
            ClipboardControl cc = new ClipboardControl();
            cc.setClipboard(this.studentsTextArea.getText());
            JOptionPane.showMessageDialog(this, "Successfully copied student list to clipboard.");
        } else {
            JOptionPane.showMessageDialog(this, "There is nothing to copy.", "Alert", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_studentListCopyButtonActionPerformed

    private void resetApplicationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetApplicationButtonActionPerformed
        String[] options = {"OK", "CANCEL"};
        int confirm = JOptionPane.showOptionDialog(this, "Are you sure? This cannot be undone.", "Warning", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
        if (confirm == 0) {
            JOptionPane.showMessageDialog(this, "Students and Modules cleared.");
            this.students.clear();
            this.studentDetailsArea.setText("");
            this.studentsTextArea.setText("");
            this.modulesTextArea.setText("");
            this.classListFilePathField.setText("");
            this.gradesFilePathField.setText("");
            this.attendanceFilePathField.setText("");
            this.searchField.setText("");
        }
    }//GEN-LAST:event_resetApplicationButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel appContainerPanel;
    private javax.swing.JButton attendanceBrowseButton;
    private javax.swing.JCheckBox attendanceConfirmCheckBox;
    private javax.swing.JTextField attendanceFilePathField;
    private javax.swing.JLabel attendanceLabel;
    private javax.swing.JButton classListBrowseButton;
    private javax.swing.JTextField classListFilePathField;
    private javax.swing.JLabel classListLabel;
    private javax.swing.JButton clearSourceFilesButton;
    private javax.swing.JButton clearStudentDetailsArea;
    private javax.swing.JButton copyToClipboardButton;
    private javax.swing.JButton gradesBrowseButton;
    private javax.swing.JTextField gradesFilePathField;
    private javax.swing.JLabel gradesLabel;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel loadFilesPanel;
    private javax.swing.JButton loadSourceFilesButton;
    private javax.swing.JButton moduleListCopyButton;
    private javax.swing.JLabel modulesLabel;
    private javax.swing.JTextArea modulesTextArea;
    private javax.swing.JButton printStudentDetailsButton;
    private javax.swing.JButton resetApplicationButton;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchField;
    private javax.swing.JTextArea studentDetailsArea;
    private javax.swing.JPanel studentDetailsSearchPanel;
    private javax.swing.JButton studentListCopyButton;
    private javax.swing.JPanel studentsAndModulesListsPanel;
    private javax.swing.JLabel studentsLabel;
    private javax.swing.JTextArea studentsTextArea;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables
}
